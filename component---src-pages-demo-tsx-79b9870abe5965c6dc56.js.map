{"version":3,"file":"component---src-pages-demo-tsx-79b9870abe5965c6dc56.js","mappings":"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","sources":["webpack://overpurlple.io/./src/components/SwitchButton.tsx","webpack://overpurlple.io/./src/components/layout.tsx","webpack://overpurlple.io/./src/components/seo.tsx","webpack://overpurlple.io/./src/pages/demo.tsx"],"sourcesContent":["import React from 'react'\n\ninterface ToggleSwitchButtonProps {\n  id: string\n  checked?: boolean\n  disabled?: boolean\n  onChange?: (arg: any) => void\n  icon?: {\n    sun: string\n    dark: string\n  }\n}\n\nexport const ToggleSwitchButton: React.FC<ToggleSwitchButtonProps> = props => {\n  const {\n    id,\n    checked,\n    disabled,\n    onChange,\n    icon = { sun: '☀', dark: '☾' },\n  } = props\n  return (\n    <div className=\"toggle-switch\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle-switch-checkbox\"\n        name={id}\n        id={id}\n        checked={checked}\n        disabled={disabled}\n        onChange={e => onChange?.(e.target.checked)}\n      />\n      {id ? (\n        <label\n          className=\"toggle-switch-label\"\n          htmlFor={props.id}\n          tabIndex={disabled ? -1 : 1}\n        >\n          <span\n            className={\n              disabled\n                ? 'toggle-switch-inner toggle-switch-disabled'\n                : 'toggle-switch-inner'\n            }\n            data-dark-icon={icon?.dark}\n            data-sun-icon={icon?.sun}\n          ></span>\n          <span\n            className={\n              disabled\n                ? 'toggle-switch-switch toggle-switch-disabled'\n                : 'toggle-switch-switch'\n            }\n          ></span>\n        </label>\n      ) : null}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Link } from 'gatsby'\nimport { ToggleSwitchButton } from './SwitchButton'\n\ninterface LayoutProps {\n  location?: any\n  title?: string\n  children?: React.ReactNode\n}\n\nexport const HomeHeader: React.FC<{ title?: string }> = ({ title }) => {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n      <ToggleSwitchButton id=\"theme-switch\" />\n    </div>\n  )\n}\n\nexport const OtherPageHeader: React.FC<{ title?: string }> = ({ title }) => {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n      <ToggleSwitchButton id=\"theme-switch\" />\n    </div>\n  )\n}\n\nconst Layout: React.FC<LayoutProps> = ({ location, title, children }) => {\n  const rootPath = `/overpurple.io/`\n  const isRootPath = location.pathname === rootPath\n  const header = isRootPath ? (\n    <HomeHeader title={title} />\n  ) : (\n    <OtherPageHeader title={title} />\n  )\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        <a href=\"https://juejin.cn/user/4283353029944296\">掘金</a>\n        <> • </>\n        <a href=\"https://github.com/lovexueorangecat/overpurple.io\">github</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ninterface SeoProps {\n  description?: string\n  title?: string\n  children?: React.ReactNode\n}\n\nconst Seo: React.FC<SeoProps> = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from 'react'\nimport { PageProps, Link, graphql, HeadFC } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{' '}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{' '}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n"],"names":["ToggleSwitchButton","props","id","checked","disabled","onChange","icon","sun","dark","React","className","type","name","e","target","htmlFor","tabIndex","HomeHeader","_ref","title","Link","to","OtherPageHeader","_ref2","_ref3","location","children","isRootPath","pathname","header","href","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","content","property","social","twitter","Head","Seo","data","path","Layout","buildTime"],"sourceRoot":""}